FUNCTION_BLOCK  car

VAR_INPUT

	positionCar : REAL;
	angleCar : REAL;

END_VAR

VAR_OUTPUT

	angleWheel : REAL;

END_VAR

// Tudo - 50, para usar o DELTAY, podendo variar a garagem
FUZZIFY positionCar

	TERM LE := (-50, 1) (-40, 1) (-15, 0);
	TERM LC := (-20, 0) (-10, 1) (0, 0);
	TERM CE := (-5, 0)  (0, 1) (5, 0);
	TERM RC := (0, 0)   (10, 1) (20, 0);
	TERM RI := (15, 0) (40, 1) (50, 1);	

END_FUZZIFY

FUZZIFY angleCar

	TERM RB := (-100, 0)(-45, 1)(10, 0);
	TERM RU := (-10, 0)(22.5, 1)(55, 0);
	TERM RV := (45, 0)(67.5, 1)(93, 0);
	TERM VE := (80, 0)(90, 1)(100, 0);
	TERM LV := (87, 0)(115, 1)(140, 0);
	TERM LU := (130, 0)(155, 1)(190, 0);
	TERM LB := (170, 0)(225, 1)(270, 0);

END_FUZZIFY

DEFUZZIFY angleWheel

	TERM NB:= (-30, 1) (-15, 0);
	TERM NM:= (-25, 0) (-15, 1) (-3, 0);
	TERM NS:= (-12, 0) (-5, 1) (2, 0);
	TERM ZE:= (-6, 0)(0, 1)(6, 0);
	TERM PS:= (-2, 0) (5, 1) (12, 0);
	TERM PM:= (3, 0) (15, 1) (25, 0);
	TERM PB:= (15, 0) (30, 1);


	METHOD : COG;
	DEFAULT := 0;

END_DEFUZZIFY

RULEBLOCK No1

        AND : MIN;	// Use 'min' for 'and'
	ACT : MIN;	// Use 'min' activation method
	ACCU : MAX;	// Use 'max' accumulation method
	
	
	RULE 1  : IF positionCar IS LE AND angleCar IS RB THEN angleWheel IS PS;
	RULE 2  : IF positionCar IS LC AND angleCar IS RB THEN angleWheel IS PM;
	RULE 3  : IF positionCar IS CE AND angleCar IS RB THEN angleWheel IS PM;
	RULE 4  : IF positionCar IS RC AND angleCar IS RB THEN angleWheel IS PB;
	RULE 5  : IF positionCar IS RI AND angleCar IS RB THEN angleWheel IS PB;
	
	RULE 6  : IF positionCar IS LE AND angleCar IS RU THEN angleWheel IS NS;
	RULE 7  : IF positionCar IS LC AND angleCar IS RU THEN angleWheel IS PS;
	RULE 8  : IF positionCar IS CE AND angleCar IS RU THEN angleWheel IS PM;
	RULE 9  : IF positionCar IS RC AND angleCar IS RU THEN angleWheel IS PB;
	RULE 10 : IF positionCar IS RI AND angleCar IS RU THEN angleWheel IS PB;
	
	RULE 11 : IF positionCar IS LE AND angleCar IS RV THEN angleWheel IS NM;
	RULE 12 : IF positionCar IS LC AND angleCar IS RV THEN angleWheel IS NS;
	RULE 13 : IF positionCar IS CE AND angleCar IS RV THEN angleWheel IS PS;
	RULE 14 : IF positionCar IS RC AND angleCar IS RV THEN angleWheel IS PM;
	RULE 15 : IF positionCar IS RI AND angleCar IS RV THEN angleWheel IS PB;
	
	RULE 16 : IF positionCar IS LE AND angleCar IS VE THEN angleWheel IS NM;
	RULE 17 : IF positionCar IS LC AND angleCar IS VE THEN angleWheel IS NM;
	RULE 18 : IF positionCar IS CE AND angleCar IS VE THEN angleWheel IS ZE;
	RULE 19 : IF positionCar IS RC AND angleCar IS VE THEN angleWheel IS PM;
	RULE 20 : IF positionCar IS RI AND angleCar IS VE THEN angleWheel IS PM;
	
	RULE 21 : IF positionCar IS LE AND angleCar IS LV THEN angleWheel IS NB;
	RULE 22 : IF positionCar IS LC AND angleCar IS LV THEN angleWheel IS NM;
	RULE 23 : IF positionCar IS CE AND angleCar IS LV THEN angleWheel IS NS;
	RULE 24 : IF positionCar IS RC AND angleCar IS LV THEN angleWheel IS PS;
	RULE 25 : IF positionCar IS RI AND angleCar IS LV THEN angleWheel IS PM;
	
	RULE 26 : IF positionCar IS LE AND angleCar IS LU THEN angleWheel IS NB;
	RULE 27 : IF positionCar IS LC AND angleCar IS LU THEN angleWheel IS NB;
	RULE 28 : IF positionCar IS CE AND angleCar IS LU THEN angleWheel IS NM;
	RULE 29 : IF positionCar IS RC AND angleCar IS LU THEN angleWheel IS NS;
	RULE 30 : IF positionCar IS RI AND angleCar IS LU THEN angleWheel IS PS;
	
        RULE 31 : IF positionCar IS LE AND angleCar IS LB THEN angleWheel IS NB;
	RULE 32 : IF positionCar IS LC AND angleCar IS LB THEN angleWheel IS NB;
	RULE 33 : IF positionCar IS CE AND angleCar IS LB THEN angleWheel IS NM;
	RULE 34 : IF positionCar IS RC AND angleCar IS LB THEN angleWheel IS NM;
	RULE 35 : IF positionCar IS RI AND angleCar IS LB THEN angleWheel IS NS;
	
END_RULEBLOCK

END_FUNCTION_BLOCK
